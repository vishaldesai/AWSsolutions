AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description:  CloudFormation Template for Deploying Lambda functions to publish Cost and Usage Data

Parameters:
  LayerName:
    Type: String
    Default: "awswrangler"
    Description: Layer Name

  LayerUriBucket:
    Type: String
    Default: "vishaluseast1"
    Description: Layer S3 URI Bucket
    
  LayerUriKey:
    Type: String
    Default: "awswrangler-layer-1.2.0-py3.8.zip"
    Description: Layer S3 URI Key

  CurPublishConfigFileBucket:
    Type: String
    Default: "vishaluseast1"
    Description: CUR Publish Config File Bucket
    
  CurPublishConfigFileKey:
    Type: String
    Default: "curpublish.conf"
    Description: CUR Publish Config File Key

  LambdaCurConfigName:
    Type: String
    Default: "curconfig"
    Description: CUR Config Lambda Name

  LambdaCurConfigUriBucket:
    Type: String
    Default: "vishaluseast1"
    Description: CUR Config Lambda URI Bucket

  LambdaCurConfigUriKey:
    Type: String
    Default: "curconfig-6a1d738e-42a9-41ce-9b20-fad28a7d7050.zip"
    Description: CUR Config Lambda URI Key

  LambdaCurConfigRole:
    Type: String
    Default: "arn:aws:iam::xxxxxxx:role/adminvishal"
    Description: CUR Config Lambda Role Arn 

  LambdaCurConfigS3EventBucket:
    Type: String
    Default: "vishal-linked"
    Description: CUR Config S3 Event Bucket
    
  LambdaCurConfigSNS:
    Type: String
    Default: "arn:aws:sns:us-east-1:xxxxxx:ETL"
    Description: CUR Config Lambda SNS notification        

  LambdaCurPublishName:
    Type: String
    Default: "curpublish"
    Description: CUR Publish Lambda Name

  LambdaCurPublishUriBucket:
    Type: String
    Default: "vishaluseast1"
    Description: CUR Publish Lambda URI Bucket  

  LambdaCurPublishUriKey:
    Type: String
    Default: "curpublish-6c8ee312-8f9f-4606-adf1-64f629dd8101.zip"
    Description: CUR Publish Lambda URI Key  
    
  LambdaCurPublishRole:
    Type: String
    Default: "arn:aws:iam::xxxxxx:role/adminvishal"
    Description: CUR Publish Lambda Role Arn 

  LambdaCurPublishSNS:
    Type: String
    Default: "arn:aws:sns:us-east-1:xxxxx:ETL"
    Description: CUR Publish Lambda SNS notification        

  LambdaCustomResourceName:
    Type: String
    Default: "curcustom"
    Description: Custom Resource Lambda Name
    
  LambdaCustomResourceRole:
    Type: String
    Default: "arn:aws:iam::xxxx:role/adminvishal"
    Description: Custom Lambda Role Arn 
    
  LogLevel:
    Type: String
    Default: "INFO"
    Description: Lambda Log Level
    
Resources:
  awswrangler:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Ref LayerName
      ContentUri:
        Bucket: !Ref LayerUriBucket
        Key: !Ref LayerUriKey
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain

  curconfig:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Ref LambdaCurConfigName
      Handler: curconfig/lambda_function.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: !Ref LambdaCurConfigRole
      CodeUri:
        Bucket: !Ref LambdaCurConfigUriBucket
        Key: !Ref LambdaCurConfigUriKey
      Environment:
        Variables:
          CUR_PUBLISH_CONFIG_BUCKET: !Ref CurPublishConfigFileBucket
          CUR_PUBLISH_CONFIG_KEY: !Ref CurPublishConfigFileKey
          CUR_PUBLISH_LAMBDA_NAME: !Ref LambdaCurPublishName
          LOG_LEVEL: !Ref LogLevel

      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnFailure:
            Type: SNS
            Destination: !Ref LambdaCurConfigSNS

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt curconfig.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${LambdaCurConfigS3EventBucket}'
      
  curpublish:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Ref LambdaCurPublishName
      Handler: curpublish/lambda_function.lambda_handler
      Runtime: python3.8
      Description: ''
      MemorySize: 3008
      Timeout: 15
      Role: !Ref LambdaCurPublishRole
      Layers:
        - !Ref awswrangler
      CodeUri:
        Bucket: !Ref LambdaCurPublishUriBucket
        Key: !Ref LambdaCurPublishUriKey
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnFailure:
            Type: SNS
            Destination: !Ref LambdaCurPublishSNS
 
                
  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaCustomResourceName
      Handler: index.lambda_handler
      Role: !Ref LambdaCustomResourceRole
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILURE'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ],
                          'Filter': {
                            'Key': {
                              'FilterRules': [
                                {
                                  'Name': 'suffix',
                                  'Value': '.csv.gz'
                                }
                              ]
                            }
                          }
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt curconfig.Arn
      Bucket: !Ref LambdaCurConfigS3EventBucket
  
